name: Frontend Continuous Integration

on:
  pull_request:
    branches:
      - main
    paths:
      - "starter/frontend/**"
  workflow_dispatch:

env:
  WORKING_DIR: ./starter/frontend

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install dependencies
        run: npm install
        working-directory: ${{ env.WORKING_DIR }}
        
      - name: Run lint
        run: npm run lint
        working-directory: ${{ env.WORKING_DIR }}

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-  

      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install dependencies
        run: npm install
        working-directory: ${{ env.WORKING_DIR }}

      - name: Run tests
        run: npm run test
        working-directory: ${{ env.WORKING_DIR }}

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: "16"      
            
      - name: Install dependencies
        run: npm install
        working-directory: ${{ env.WORKING_DIR }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and export
        uses: docker/build-push-action@v6
        with:
          context: ./${{ env.WORKING_DIR }}
          tags: mp-frontend:latest
          outputs: type=docker,dest=/tmp/mp-frontend.tar
          build-args: REACT_APP_MOVIE_API_URL=${{ vars.REACT_APP_MOVIE_API_URL }}
